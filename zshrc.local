#### Git

gic () {
    LBUFFER="git commit -m \""
    RBUFFER="\""
}
zle -N gic gic
bindkey "git c" gic

gis () {
    LBUFFER="git status"
}
zle -N gis gis
bindkey "git s" gis

gap () {
    LBUFFER="git add -p"
}
zle -N gap gap
bindkey "git a" gap

gicc () {
    LBUFFER="git checkout"
}
zle -N gicc gicc
bindkey "git ch" gicc

ssha () {
    LBUFFER="ssh-add ~/.ssh/id_"
}
zle -N ssha ssha
bindkey "ssh-a" ssha


function sshon(){
    eval "$(ssh-agent)"
    ssh-add ~/.ssh/id_ed25519_github
}

#### Python stuff

function activate_conda(){
    export PATH="/home/heuna/miniconda3/bin:$PATH"
}

function activate_venv(){
    source $1/bin/activate
}

function mkvenv2(){
    if [ -n "${VIRTUAL_ENV}" ] ; then
        echo "You already have a virtualenv active: $VIRTUAL_ENV"
        return 1
    fi
    local venv_name
    venv_name=${1:-.venv2}
    if [ -e $venv_name ] ; then
        echo "$venv_name already exists, aborting."
        return 1
    fi
    echo "Will setup virtualenv in $venv_name"
    virtualenv $venv_name
    activate_venv $venv_name
    pip install -U pip setuptools
}

function mkvenv3(){
    if [ -n "${VIRTUAL_ENV}" ] ; then
        echo "You already have a virtualenv active: $VIRTUAL_ENV"
        return 1
    fi
    local venv_name
    venv_name=${1:-.venv3}
    if [ -e $venv_name ] ; then
        echo "$venv_name already exists, aborting."
        return 1
    fi
    echo "Will setup virtualenv in $venv_name"
    python3 -m venv $venv_name
    activate_venv $venv_name
    pip install -U pip setuptools
}

alias venv2="activate_venv .venv2"
alias venv3="activate_venv .venv3"

#### adding path
export PATH=$PATH:$HOME/.local/bin


#### Configure prompt
export TERM="xterm-256color"

export CONFIG="$HOME/config"
source "$CONFIG/powerlevel10k/powerlevel10k.zsh-theme"
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir virtualenv anaconda vcs)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status custom_intelligence time background_jobs)

zsh_python_version () {
    python -c 'import sys; print("py{}.{}".format(sys.version_info[0], sys.version_info[1]))'
}

zsh_intelligence () {
    if [[ (-n $VIRTUAL_ENV || -n $CONDA_PREFIX) ]]; then
        zsh_python_version;
    else
        echo "~"
    fi
}

POWERLEVEL9K_CUSTOM_INTELLIGENCE='zsh_intelligence'

# keyboard disable
function disable_keyboard(){
   xinput list|grep AT| sed -n 's/.*id=\([0-9]\+\).*/\1/p' | xargs xinput disable
}

function netspeed(){
    activate_venv $CONFIG/.netspeed
    speedtest-cli
    deactivate
}

alias gotemp='cd "$(mktemp -d)"'

function ml_venv3(){
    mkvenv3
    venv3
    pip install -r "$CONFIG"/ml_requirements.list
}

function dl_venv3(){
    ml_venv3
    venv3
    pip install -r "$CONFIG"/dl_requirements.list
}

function make_ml_playground(){
    gotemp
    ml_venv3
}

alias mkplay='make_ml_playground'

export GTK_IM_MODULE=ibus
export XMODIFIERS=@im=ibus
export QT_IM_MODULE=ibus
